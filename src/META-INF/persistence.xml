<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence 
	http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
	version="2.0" xmlns="http://java.sun.com/xml/ns/persistence">
	
	<!--
	Comparing RESOURCE_LOCAL and JTA persistence contexts

	With <persistence-unit transaction-type="RESOURCE_LOCAL"> YOU are responsible for EntityManager (PersistenceContext/Cache) creating and tracking...
	
	In most cases, RESOURCE_LOCAL is fine. This would use basic JDBC-level transactions. 
	The downside is that the transaction is local to the JPA persistence unit, so if you want 
	a transaction that spans multiple persistence units (or other databases), then RESOURCE_LOCAL may not be good enough.
	
	You must use the EntityManagerFactory to get an EntityManager
	The resulting EntityManager instance is a PersistenceContext/Cache
	An EntityManagerFactory can be injected via the @PersistenceUnit annotation only (not @PersistenceContext)
	You are not allowed to use @PersistenceContext to refer to a unit of type RESOURCE_LOCAL
	You must use the EntityTransaction API to begin/commit around every call to your EntityManger
	Calling entityManagerFactory.createEntityManager() twice results in two separate EntityManager instances and therefor two separate PersistenceContexts/Caches.
	It is almost never a good idea to have more than one instance of an EntityManager in use (don't create a second one unless you've destroyed the first)
	
	**************************************
	
	With <persistence-unit transaction-type="JTA"> the CONTAINER will do EntityManager (PersistenceContext/Cache) creating and tracking...
	
	JTA is also used for managing transactions across systems like JMS and JCA, but that's fairly exotic 
	usage for most of us.
	To use JTA, you need support for it in your application server, and also support from the JDBC driver.

	You cannot use the EntityManagerFactory to get an EntityManager
	You can only get an EntityManager supplied by the container
	An EntityManager can be injected via the @PersistenceContext annotation only (not @PersistenceUnit)
	You are not allowed to use @PersistenceUnit to refer to a unit of type JTA
	The EntityManager given by the container is a reference to the PersistenceContext/Cache associated with a JTA Transaction.
	If no JTA transaction is in progress, the EntityManager cannot be used because there is no PersistenceContext/Cache.
	Everyone with an EntityManager reference to the same unit in the same transaction will automatically have a reference to the same PersistenceContext/Cache
	The PersistenceContext/Cache is flushed and cleared at JTA commit time
	-->
	<persistence-unit name="helloworld" transaction-type="RESOURCE_LOCAL"> <!-- name="helloworld is the same persistence unit element than Persistence.createEntityManagerFactory("helloworld") in Main.java class  -->
		
		<properties>
			<!-- Database connection settings -->
			<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
			<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/helloworld" />
			<property name="javax.persistence.jdbc.user" value="user1" />
			<property name="javax.persistence.jdbc.password" value="user1pass" />

			<!-- SQL dialect -->
			<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect" />
			
			<!-- Create/update tables automatically using mapping metadata -->
			<property name="hibernate.hbm2ddl.auto" value="update" />
			
			<!-- Pretty print the SQL in the log file and console -->
			<property name="hibernate.format_sql" value="true" />
				
			<!-- Not need mapping entities or resources as in hibernate.cfg.xml file. Hibernate is automatically going to detect them -->
		</properties>
	
	</persistence-unit>
	
</persistence>